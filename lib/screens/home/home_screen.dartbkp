import 'package:flutter/material.dart';
import 'package:flutter_map/flutter_map.dart';
import 'package:latlong2/latlong.dart';
import 'package:provider/provider.dart';
import '../../services/sound_service.dart';
import '../../services/motorista_online_service.dart';
import '../configuracoes/configuracoes_screen.dart';
import '../historico/historico_screen.dart';
import '../perfil/perfil_screen.dart';
import '../../widgets/corridas_disponiveis_widget.dart';

class HomeScreen extends StatefulWidget {
  const HomeScreen({super.key});

  @override
  State<HomeScreen> createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> with TickerProviderStateMixin {
  final MapController _mapController = MapController();
  late AnimationController _pulseController;
  late Animation<double> _pulseAnimation;
  late MotoristaOnlineService _onlineService;
  
  String _statusText = 'Offline';
  bool _isInitializing = true;

  // Cores Vello
  static const Color velloOrange = Color(0xFFFF6B35);
  static const Color velloBlue = Color(0xFF2E3A59);
  static const Color velloGreen = Color(0xFF10B981);

  @override
  void initState() {
    super.initState();
    
    // Inicializar serviço Firebase
    _onlineService = MotoristaOnlineService();
    _initializeService();
    
    // Animação de pulso para status online
    _pulseController = AnimationController(
      duration: const Duration(milliseconds: 1000),
      vsync: this,
    );
    _pulseAnimation = Tween<double>(begin: 1.0, end: 1.2).animate(
      CurvedAnimation(parent: _pulseController, curve: Curves.easeInOut),
    );
    
    // Som de boas-vindas
    WidgetsBinding.instance.addPostFrameCallback((_) {
      SoundService.playLoginSound();
    });
  }

  Future<void> _initializeService() async {
    try {
      await _onlineService.initialize();
      
      // Configurar callbacks
      _onlineService.onStatusUpdate = (status) {
        if (mounted) {
          setState(() {
            _statusText = status;
          });
        }
      };
      
      setState(() {
        _isInitializing = false;
      });
      
    } catch (e) {
      print('Erro ao inicializar serviço: $e');
      setState(() {
        _isInitializing = false;
        _statusText = 'Erro na inicialização';
      });
    }
  }

  @override
  void dispose() {
    _pulseController.dispose();
    _onlineService.dispose();
    super.dispose();
  }

  void _toggleOnlineStatus() async {
    if (_isInitializing) return;
    
    try {
      await _onlineService.toggleOnlineStatus();
      
      // Som personalizado baseado no status
      if (_onlineService.isOnline) {
        await SoundService.playOnlineSound();
        _pulseController.repeat(reverse: true);
      } else {
        await SoundService.playOfflineSound();
        _pulseController.stop();
        _pulseController.reset();
      }
      
      // Feedback visual
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Row(
            children: [
              Icon(
                _onlineService.isOnline ? Icons.radio_button_checked : Icons.radio_button_off,
                color: Colors.white,
              ),
              const SizedBox(width: 8),
              Text(
                _onlineService.isOnline 
                    ? 'Você está online e buscando corridas!' 
                    : 'Você está offline',
                style: const TextStyle(fontWeight: FontWeight.w500),
              ),
            ],
          ),
          backgroundColor: _onlineService.isOnline ? velloGreen : Colors.grey[600],
          behavior: SnackBarBehavior.floating,
          shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),
          duration: const Duration(seconds: 2),
        ),
      );
      
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('Erro ao alterar status: $e'),
          backgroundColor: Colors.red,
        ),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return ChangeNotifierProvider.value(
      value: _onlineService,
      child: Scaffold(
        backgroundColor: Colors.grey[50],
        body: SafeArea(
          child: Column(
            children: [
              // Header com status e controles
              _buildHeader(),
              
              // Mapa
              _buildMap(),
              
              // Área de corridas
              Expanded(
                child: Container(
                  decoration: BoxDecoration(
                    color: Colors.white,
                    borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
                    boxShadow: [
                      BoxShadow(
                        color: Colors.black.withOpacity(0.1),
                        blurRadius: 10,
                        offset: Offset(0, -5),
                      ),
                    ],
                  ),
                  child: _isInitializing 
                      ? _buildLoadingWidget()
                      : CorridasDisponiveisWidget(),
                ),
              ),
            ],
          ),
        ),
        
        // Bottom Navigation
        bottomNavigationBar: _buildBottomNavigation(),
      ),
    );
  }

  Widget _buildHeader() {
    return Container(
      padding: EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: velloBlue,
        boxShadow: [
          BoxShadow(
            color: velloBlue.withOpacity(0.3),
            blurRadius: 10,
            offset: Offset(0, 5),
          ),
        ],
      ),
      child: Column(
        children: [
          // Logo e status
          Row(
            children: [
              Container(
                padding: EdgeInsets.all(8),
                decoration: BoxDecoration(
                  color: velloOrange,
                  borderRadius: BorderRadius.circular(12),
                ),
                child: Icon(
                  Icons.local_taxi,
                  color: Colors.white,
                  size: 24,
                ),
              ),
              SizedBox(width: 12),
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      'Vello Motorista',
                      style: TextStyle(
                        color: Colors.white,
                        fontSize: 18,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    Text(
                      _statusText,
                      style: TextStyle(
                        color: Colors.white70,
                        fontSize: 14,
                      ),
                    ),
                  ],
                ),
              ),
              // Indicador de status
              Consumer<MotoristaOnlineService>(
                builder: (context, service, child) {
                  return AnimatedBuilder(
                    animation: _pulseAnimation,
                    builder: (context, child) {
                      return Transform.scale(
                        scale: service.isOnline ? _pulseAnimation.value : 1.0,
                        child: Container(
                          width: 12,
                          height: 12,
                          decoration: BoxDecoration(
                            color: service.isOnline ? velloGreen : Colors.grey,
                            shape: BoxShape.circle,
                            boxShadow: service.isOnline ? [
                              BoxShadow(
                                color: velloGreen.withOpacity(0.5),
                                blurRadius: 8,
                                spreadRadius: 2,
                              ),
                            ] : null,
                          ),
                        ),
                      );
                    },
                  );
                },
              ),
            ],
          ),
          
          SizedBox(height: 16),
          
          // Botão Online/Offline
          Consumer<MotoristaOnlineService>(
            builder: (context, service, child) {
              return SizedBox(
                width: double.infinity,
                child: ElevatedButton.icon(
                  onPressed: _isInitializing ? null : _toggleOnlineStatus,
                  icon: _isInitializing 
                      ? SizedBox(
                          width: 20,
                          height: 20,
                          child: CircularProgressIndicator(
                            strokeWidth: 2,
                            valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                          ),
                        )
                      : Icon(
                          service.isOnline ? Icons.pause : Icons.play_arrow,
                          color: Colors.white,
                        ),
                  label: Text(
                    _isInitializing 
                        ? 'Inicializando...'
                        : service.isOnline 
                            ? 'Ficar Offline' 
                            : 'Ficar Online',
                    style: TextStyle(
                      color: Colors.white,
                      fontWeight: FontWeight.w600,
                      fontSize: 16,
                    ),
                  ),
                  style: ElevatedButton.styleFrom(
                    backgroundColor: _isInitializing 
                        ? Colors.grey 
                        : service.isOnline 
                            ? Colors.orange[600] 
                            : velloGreen,
                    padding: EdgeInsets.symmetric(vertical: 12),
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(12),
                    ),
                    elevation: 4,
                  ),
                ),
              );
            },
          ),
        ],
      ),
    );
  }

  Widget _buildMap() {
    return Container(
      height: 200,
      margin: EdgeInsets.all(16),
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 10,
            offset: Offset(0, 5),
          ),
        ],
      ),
      child: ClipRRect(
        borderRadius: BorderRadius.circular(16),
        child: Consumer<MotoristaOnlineService>(
          builder: (context, service, child) {
            final position = service.currentPosition;
            final center = position != null 
                ? LatLng(position.latitude, position.longitude)
                : LatLng(-23.5505, -46.6333); // São Paulo padrão
            
            return FlutterMap(
              mapController: _mapController,
              options: MapOptions(
                center: center,
                zoom: 15.0,
                interactiveFlags: InteractiveFlag.all & ~InteractiveFlag.rotate,
              ),
              children: [
                TileLayer(
                  urlTemplate: 'https://tile.openstreetmap.org/{z}/{x}/{y}.png',
                  userAgentPackageName: 'com.vello.motorista',
                ),
                MarkerLayer(
                  markers: [
                    Marker(
                      point: center,
                      child: Container(
                        decoration: BoxDecoration(
                          color: service.isOnline ? velloGreen : Colors.grey,
                          shape: BoxShape.circle,
                          border: Border.all(color: Colors.white, width: 3),
                          boxShadow: [
                            BoxShadow(
                              color: Colors.black.withOpacity(0.3),
                              blurRadius: 6,
                              offset: Offset(0, 3),
                            ),
                          ],
                        ),
                        child: Icon(
                          Icons.local_taxi,
                          color: Colors.white,
                          size: 20,
                        ),
                      ),
                    ),
                  ],
                ),
              ],
            );
          },
        ),
      ),
    );
  }

  Widget _buildLoadingWidget() {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          CircularProgressIndicator(
            valueColor: AlwaysStoppedAnimation<Color>(velloOrange),
          ),
          SizedBox(height: 16),
          Text(
            'Inicializando sistema...',
            style: TextStyle(
              fontSize: 16,
              color: Colors.grey[600],
            ),
          ),
          SizedBox(height: 8),
          Text(
            'Conectando ao Firebase',
            style: TextStyle(
              fontSize: 14,
              color: Colors.grey[500],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildBottomNavigation() {
    return Container(
      decoration: BoxDecoration(
        color: Colors.white,
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 10,
            offset: Offset(0, -5),
          ),
        ],
      ),
      child: SafeArea(
        child: Padding(
          padding: EdgeInsets.symmetric(horizontal: 16, vertical: 8),
          child: Row(
            mainAxisAlignment: MainAxisAlignment.spaceAround,
            children: [
              _buildNavItem(
                icon: Icons.home,
                label: 'Início',
                isActive: true,
                onTap: () {},
              ),
              _buildNavItem(
                icon: Icons.history,
                label: 'Histórico',
                onTap: () {
                  Navigator.push(
                    context,
                    MaterialPageRoute(builder: (context) => HistoricoScreen()),
                  );
                },
              ),
              _buildNavItem(
                icon: Icons.person,
                label: 'Perfil',
                onTap: () {
                  Navigator.push(
                    context,
                    MaterialPageRoute(builder: (context) => PerfilScreen()),
                  );
                },
              ),
              _buildNavItem(
                icon: Icons.settings,
                label: 'Config',
                onTap: () {
                  Navigator.push(
                    context,
                    MaterialPageRoute(builder: (context) => ConfiguracoesScreen()),
                  );
                },
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildNavItem({
    required IconData icon,
    required String label,
    bool isActive = false,
    required VoidCallback onTap,
  }) {
    return GestureDetector(
      onTap: onTap,
      child: Container(
        padding: EdgeInsets.symmetric(vertical: 8, horizontal: 12),
        decoration: BoxDecoration(
          color: isActive ? velloOrange.withOpacity(0.1) : Colors.transparent,
          borderRadius: BorderRadius.circular(12),
        ),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Icon(
              icon,
              color: isActive ? velloOrange : Colors.grey[600],
              size: 24,
            ),
            SizedBox(height: 4),
            Text(
              label,
              style: TextStyle(
                color: isActive ? velloOrange : Colors.grey[600],
                fontSize: 12,
                fontWeight: isActive ? FontWeight.w600 : FontWeight.normal,
              ),
            ),
          ],
        ),
      ),
    );
  }
}

