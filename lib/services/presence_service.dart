// SISTEMA DE PRESEN√áA CORRIGIDO - MANT√âM ONLINE QUANDO MINIMIZADO
// App continua rodando em background para receber notifica√ß√µes de corridas

import 'package:firebase_database/firebase_database.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/services.dart';
import 'dart:async';

class PresenceService {
  static final PresenceService _instance = PresenceService._internal();
  factory PresenceService() => _instance;
  PresenceService._internal();

  final FirebaseDatabase _realtimeDb = FirebaseDatabase.instance;
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final FirebaseAuth _auth = FirebaseAuth.instance;
  
  DatabaseReference? _presenceRef;
  DatabaseReference? _connectedRef;
  Timer? _heartbeatTimer;
  bool _isInitialized = false;
  bool _isOnline = false;

  // Inicializar sistema de presen√ßa
  Future<void> initializePresence() async {
    if (_isInitialized) return;
    
    final user = _auth.currentUser;
    if (user == null) return;

    try {
      // Refer√™ncia para o status de conex√£o do Firebase
      _connectedRef = _realtimeDb.ref('.info/connected');
      
      // Refer√™ncia para a presen√ßa do usu√°rio
      _presenceRef = _realtimeDb.ref('presence/${user.uid}');

      // Escutar mudan√ßas na conex√£o
      _connectedRef!.onValue.listen((event) {
        final connected = event.snapshot.value as bool? ?? false;
        
        if (connected && !_isOnline) {
          _setUserOnline();
        }
      });

      // Configurar detec√ß√£o APENAS para fechamento real do app
      _setupAppLifecycleDetection();
      
      // Iniciar heartbeat para manter conex√£o ativa
      _startHeartbeat();
      
      _isInitialized = true;
      print('‚úÖ Sistema de presen√ßa inicializado (mant√©m online quando minimizado)');
      
    } catch (e) {
      print('‚ùå Erro ao inicializar presen√ßa: $e');
    }
  }

  // Marcar usu√°rio como online
  Future<void> _setUserOnline() async {
    final user = _auth.currentUser;
    if (user == null || _presenceRef == null) return;

    try {
      final now = DateTime.now().millisecondsSinceEpoch;
      
      // Dados de presen√ßa no Realtime Database
      final presenceData = {
        'online': true,
        'lastSeen': now,
        'timestamp': ServerValue.timestamp,
        'appState': 'active', // Estado do app
      };

      // Configurar para ficar offline APENAS quando desconectar completamente
      await _presenceRef!.onDisconnect().set({
        'online': false,
        'lastSeen': now,
        'timestamp': ServerValue.timestamp,
        'appState': 'disconnected',
      });

      // Definir como online agora
      await _presenceRef!.set(presenceData);

      // Atualizar tamb√©m no Firestore
      await _updateFirestoreStatus(true, 'active');
      
      _isOnline = true;
      print('üü¢ Motorista marcado como ONLINE (pode receber corridas)');
      
    } catch (e) {
      print('‚ùå Erro ao marcar como online: $e');
    }
  }

  // Marcar usu√°rio como offline (APENAS quando realmente sair)
  Future<void> setUserOffline() async {
    final user = _auth.currentUser;
    if (user == null) return;

    try {
      final now = DateTime.now().millisecondsSinceEpoch;
      
      // Atualizar Realtime Database
      if (_presenceRef != null) {
        await _presenceRef!.set({
          'online': false,
          'lastSeen': now,
          'timestamp': ServerValue.timestamp,
          'appState': 'offline',
        });
      }

      // Atualizar Firestore
      await _updateFirestoreStatus(false, 'offline');
      
      _isOnline = false;
      print('üî¥ Motorista marcado como OFFLINE');
      
    } catch (e) {
      print('‚ùå Erro ao marcar como offline: $e');
    }
  }

  // Atualizar status no background (minimizado mas ativo)
  Future<void> _setUserBackground() async {
    final user = _auth.currentUser;
    if (user == null || _presenceRef == null) return;

    try {
      final now = DateTime.now().millisecondsSinceEpoch;
      
      // Manter online mas indicar que est√° em background
      final presenceData = {
        'online': true, // MANT√âM ONLINE!
        'lastSeen': now,
        'timestamp': ServerValue.timestamp,
        'appState': 'background', // Indica que est√° minimizado
      };

      await _presenceRef!.set(presenceData);
      await _updateFirestoreStatus(true, 'background');
      
      print('üì± App em background - MANTENDO ONLINE para receber corridas');
      
    } catch (e) {
      print('‚ùå Erro ao atualizar status background: $e');
    }
  }

  // Atualizar status no Firestore
  Future<void> _updateFirestoreStatus(bool isOnline, String appState) async {
    final user = _auth.currentUser;
    if (user == null) return;

    try {
      await _firestore.collection('motoristas').doc(user.uid).update({
        'isOnline': isOnline,
        'online': isOnline,
        'statusOnline': isOnline,
        'appState': appState, // 'active', 'background', 'offline'
        'lastSeen': FieldValue.serverTimestamp(),
        'lastActivity': FieldValue.serverTimestamp(),
        'canReceiveRides': isOnline, // Pode receber corridas se estiver online
      });
    } catch (e) {
      print('‚ùå Erro ao atualizar Firestore: $e');
    }
  }

  // Configurar detec√ß√£o do ciclo de vida do app (CORRIGIDO)
  void _setupAppLifecycleDetection() {
    SystemChannels.lifecycle.setMessageHandler((message) async {
      print('üì± App lifecycle: $message');
      
      switch (message) {
        case 'AppLifecycleState.paused':
          // App minimizado - MANT√âM ONLINE para receber corridas
          await _setUserBackground();
          print('üì± App minimizado - MANTENDO ONLINE para corridas');
          break;
          
        case 'AppLifecycleState.inactive':
          // App temporariamente inativo - MANT√âM ONLINE
          print('üì± App temporariamente inativo - MANTENDO ONLINE');
          break;
          
        case 'AppLifecycleState.detached':
          // App realmente fechado - MARCA OFFLINE
          await setUserOffline();
          print('üì± App fechado - MARCANDO OFFLINE');
          break;
          
        case 'AppLifecycleState.resumed':
          // App reaberto - MARCA ONLINE ATIVO
          await _setUserOnline();
          print('üì± App reaberto - MARCANDO ONLINE ATIVO');
          break;
      }
      return null;
    });
  }

  // Heartbeat - manter conex√£o ativa (MELHORADO)
  void _startHeartbeat() {
    _heartbeatTimer?.cancel();
    
    _heartbeatTimer = Timer.periodic(Duration(minutes: 1), (timer) async {
      final user = _auth.currentUser;
      if (user == null || !_isOnline) {
        timer.cancel();
        return;
      }

      try {
        // Atualizar timestamp de atividade para mostrar que est√° vivo
        await _firestore.collection('motoristas').doc(user.uid).update({
          'lastActivity': FieldValue.serverTimestamp(),
          'heartbeat': FieldValue.serverTimestamp(),
        });
        
        print('üíì Heartbeat enviado - motorista ativo');
        
      } catch (e) {
        print('‚ùå Erro no heartbeat: $e');
      }
    });
  }

  // Cleanup quando fazer logout
  Future<void> cleanup() async {
    try {
      await setUserOffline();
      
      if (_presenceRef != null) {
        await _presenceRef!.onDisconnect().cancel();
      }
      
      _heartbeatTimer?.cancel();
      
      _presenceRef = null;
      _connectedRef = null;
      _heartbeatTimer = null;
      _isInitialized = false;
      _isOnline = false;
      
      print('üßπ Sistema de presen√ßa limpo (logout)');
      
    } catch (e) {
      print('‚ùå Erro no cleanup: $e');
    }
  }

  // M√©todo para for√ßar online (quando aceitar corrida, etc.)
  Future<void> forceOnline() async {
    await _setUserOnline();
  }

  // Verificar se est√° online
  bool get isOnline => _isOnline;
}

// COMO USAR NO MAIN.DART (CORRIGIDO):

/*
import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'presence_service.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp();
  runApp(MyApp());
}

class MyApp extends StatefulWidget {
  @override
  _MyAppState createState() => _MyAppState();
}

class _MyAppState extends State<MyApp> with WidgetsBindingObserver {
  final PresenceService _presenceService = PresenceService();

  @override
  void initState() {
    super.initState();
    WidgetsBinding.instance.addObserver(this);
    
    // Inicializar presen√ßa quando o app iniciar
    _initializePresence();
  }

  @override
  void dispose() {
    WidgetsBinding.instance.removeObserver(this);
    super.dispose();
  }

  @override
  void didChangeAppLifecycleState(AppLifecycleState state) {
    super.didChangeAppLifecycleState(state);
    
    // O PresenceService j√° trata isso automaticamente
    print('üì± App state changed to: $state');
  }

  void _initializePresence() async {
    // Aguardar um pouco para garantir que o Firebase Auth est√° pronto
    await Future.delayed(Duration(seconds: 2));
    await _presenceService.initializePresence();
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Vello Motorista',
      home: YourHomeScreen(),
    );
  }
}
*/

// COMO USAR NO AUTH_SERVICE.DART (CORRIGIDO):

/*
// No m√©todo de login, adicione:
Future<bool> signIn(String email, String password) async {
  try {
    // ... c√≥digo de login existente ...
    
    if (success) {
      // Inicializar presen√ßa ap√≥s login bem-sucedido
      await PresenceService().initializePresence();
    }
    
    return success;
  } catch (e) {
    return false;
  }
}

// No m√©todo de logout, adicione:
Future<void> signOut() async {
  try {
    // Limpar presen√ßa antes de fazer logout
    await PresenceService().cleanup();
    
    // ... c√≥digo de logout existente ...
    await _auth.signOut();
    
  } catch (e) {
    print('Erro no logout: $e');
  }
}
*/

// CONFIGURA√á√ÉO PARA BACKGROUND PROCESSING:

/*
// Adicione no pubspec.yaml:
dependencies:
  firebase_database: ^10.5.0
  flutter_background_service: ^5.0.5
  flutter_local_notifications: ^16.3.2

// Adicione no android/app/src/main/AndroidManifest.xml:
<uses-permission android:name="android.permission.FOREGROUND_SERVICE" />
<uses-permission android:name="android.permission.WAKE_LOCK" />
<uses-permission android:name="android.permission.RECEIVE_BOOT_COMPLETED" />

<service
    android:name="id.flutter.flutter_background_service.BackgroundService"
    android:exported="false"
    android:foregroundServiceType="dataSync" />
*/

// INSTRU√á√ïES DE USO:
/*
1. ‚úÖ App MANT√âM ONLINE quando minimizado (para receber corridas)
2. ‚úÖ App marca OFFLINE apenas quando:
   - Usu√°rio faz logout
   - App √© realmente fechado (detached)
   - Perde conex√£o por muito tempo

3. ‚úÖ App pode mostrar overlay de corridas mesmo minimizado
4. ‚úÖ Heartbeat mant√©m conex√£o ativa
5. ‚úÖ Sistema detecta automaticamente mudan√ßas de estado

6. Para testar:
   - Minimize o app ‚Üí Deve continuar ONLINE
   - Feche o app ‚Üí Deve ficar OFFLINE
   - Fa√ßa logout ‚Üí Deve ficar OFFLINE
   - Reabra o app ‚Üí Deve voltar ONLINE
*/

